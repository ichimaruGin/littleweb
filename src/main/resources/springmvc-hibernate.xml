<?xml version="1.0" encoding="utf-8"?>
<!-- Spring配置文件的根元素，使用spring-beans-3.0.xsd语义约束 -->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd" >
	
	<context:component-scan base-package="com.iwebirth.db.service" ></context:component-scan>
	<!-- 定义数据源bean 使用C3P0数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${datasource.driverClass}"/>
		<property name="jdbcUrl" value="${datasource.jdbcUrl}"/>
		<property name="user" value="${datasource.user}"/>
		<property name="password" value="${datasource.password}"/>
		<property name="maxPoolSize" value="${datasource.maxPoolSize}"/>
		<property name="minPoolSize" value="${datasource.minPoolSize}"/>
		<property name="initialPoolSize" value="${datasource.initialPoolSize}"/>
		<property name="maxIdleTime" value="${datasource.maxIdleTime}"/>
	</bean>

	<!-- 定义session Factory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" >
		<property name="dataSource" ref="dataSource"/>
		<property name="mappingResources">
			<list>
				<!-- pojo的映射文件 -->
				<!--<value>user.hbm.xml</value>
					<value>CompanyModel.hbm.xml</value>-->
			</list>
		</property>
		<!-- 自动扫瞄包下面的映射文件-->
		<property name="packagesToScan" value="com.iwebirth.db.model" />
		<property name="hibernateProperties">
			<value>
				hibernate.dialect = org.hibernate.dialect.MySQLDialect
				hibernate.hbm2ddl.auto = update
				<!--hibernate.current_session_context_class = thread-->
				hibernate.show_sql=true
			</value>
		</property>
	</bean>

	<!--&lt;!&ndash; 事务管理器 &ndash;&gt;-->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<!-- 增加事务管理 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- propagation属性指事务的传播行为 与事务控制相关  isolation指隔离级别，默认采用后端数据库的隔离级别  默认只在抛出运行时异常时回滚-->
			<tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="RuntimeException"/>
		</tx:attributes>
	</tx:advice>
	<!-- AOP  -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	<aop:config>
		<aop:advisor advice-ref="transactionAdvice" pointcut="execution(* com.iwebirth.db.service..*.*(..))"/>
        <!--<aop:advisor advice-ref="transactionAdvice" pointcut="execution(* com.iwebirth.db.service.common.*.*(..))"/>-->
	</aop:config>
	
	<!-- 根据Annotation来生成事务代理  要使用@Transactional必须要下面的声明-->
	<!--  <tx:annotation-driven transaction-manager="transactionManager"/> -->
</beans>